// <auto-generated />
using System;
using CollaborativeDrawing.ServerApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SessionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.DrawingData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Points")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShapeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Thickness")
                        .HasColumnType("float");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DrawingData");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.SessionUser", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("SessionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionUsers");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.TemporaryUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("TemporaryUsers");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.TextData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FontSize")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("X")
                        .HasColumnType("float");

                    b.Property<float>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TextData");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.ChatMessage", b =>
                {
                    b.HasOne("CollaborativeDrawing.ServerApp.Models.Session", null)
                        .WithMany("ChatHistory")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.SessionUser", b =>
                {
                    b.HasOne("CollaborativeDrawing.ServerApp.Models.Session", "Session")
                        .WithMany("SessionUsers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollaborativeDrawing.ServerApp.Models.User", "User")
                        .WithMany("SessionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.TemporaryUser", b =>
                {
                    b.HasOne("CollaborativeDrawing.ServerApp.Models.Session", "Session")
                        .WithMany("TemporaryUsers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.Session", b =>
                {
                    b.Navigation("ChatHistory");

                    b.Navigation("SessionUsers");

                    b.Navigation("TemporaryUsers");
                });

            modelBuilder.Entity("CollaborativeDrawing.ServerApp.Models.User", b =>
                {
                    b.Navigation("SessionUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
